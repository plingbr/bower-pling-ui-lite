{"version":3,"sources":["main.js","app-module.js","core/apis/applications-service.js","core/apis/card-validator-service.js","core/apis/cep-service.js","core/apis/coreapi-service.js","core/apis/credentials-service.js","core/apis/customers-service.js","core/apis/http-helper.js","core/apis/http-service.js","core/apis/token-service.js","core/boot/bootstrapper.js","core/boot/index.js","core/boot/loader.js","core/caching/caching-service.js","core/commons/localstorage-service.js","core/commons/sessionstorage-service.js","core/config/interceptor-factory.js","core/debugging/error-handler.js","core/debugging/logger.js"],"names":["context","pling","window","PlingUiConfig","$provide","$httpProvider","decorator","$delegate","shadowLogger","interceptors","push","PlingUiRun","options","$injector","cache","onRun","cacheViews","get","angular","module","config","run","ApplicationsService","$window","$localstorage","httpService","tokenService","this","getLocal","localAppData","JSON","parse","getCurrentAppModule","currentAppModule","getCurrentApp","currentApp","appModule","env","getCallbackUrl","appId","cb","post","appid","success","data","callbackUrl","error","reason","redirect","url","location","href","service","$inject","CardValidatorService","luhn10","identifier","num","sum","alt","i","length","parseInt","charAt","validateDate","date","now","Date","month","substr","year","getFullYear","getTime","types","niceType","type","prefixPattern","exactPattern","gaps","lengths","code","name","size","getValidYears","nowYear","validYears","validate","cardNumber","dateExpiration","cvv","number","numberResult","dateResult","validType","isValid","toString","test","validateCardNumber","CepService","getCep","cep","CoreApiService","$rootScope","$http","self","getAppCoreUrl","app","core_url","def_api_version","getApplicationName","def_api_app","toUpperCase","slice","redirectToLoginWithCallback","callbackQueryString","$emit","environment","console","log","redirectToControlPanel","getSocialMedia","facebook","twitter","getCurrentBusiness","current_business","CredentialsService","core","$q","getCredential","setObject","logout","clearAll","login","credential","deferred","defer","loginData","set","token","err","reject","resolve","promise","userData","CustomersService","createCustomer","customer","customerData","updateCustomer","put","getCustomer","customerId","HttpHelperService","groups","registerUrl","groupName","cancelRequest","HttpService","save","update","upload","file","transformRequest","identity","headers","Content-Type","undefined","id","indexOf","responseType","getImage","imageDownloadData","blob","Blob","reader","FileReader","readAsDataURL","onloadend","result","req","method","TokenService","coreApiService","credentialData","logger","Bootstrapper","isBootstrapped","prototype","Angular","root","appname","source","localStorage","setItem","loader","load","local_core_url","localCallbackUrl","queryString","search","coreUrl","defApiVersion","initInjector","injector","currentUrl","warn","debug","auth","Authorization","stringify","profilesProducts","iat","exp","value","bootstrap","clear","split","urlData","modules","settings","menu","submenu","forEach","isSubMenu","isMenu","viewPreferences","boot","dom","onDOMLoaded","directive","filter","querySelector","getAttribute","info","addEventListener","document","ConfLoader","filepath","parsed","xhr","XMLHttpRequest","onreadystatechange","readyState","status","responseText","onerror","open","setRequestHeader","send","CachingService","$templateCache","$route","cacheObj","routeObj","partial","route","viewCache","router","routes","hasOwnProperty","templateUrl","$LocalStorage","key","getObject","$SessionStorage","PlingRequestInterceptor","request","isAuth","getItem","requestError","response","when","responseError","factory","PlingUiExceptionHandler","exception","cause","dispatcher","details","$broadcast","PlingUiLogger","dispatch","arguments","params","arg","proc","stamp","prefix","msg","apply"],"mappings":"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","file":"pling-ui-lite.min.js","sourcesContent":["(function (context) {\r\n    'use strict';\r\n\r\n    context.pling = {};\r\n\r\n}(window));\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('plingUiLite', []);\r\n\r\n    angular\r\n        .module('plingUiLite')\r\n        .config(['$provide', '$httpProvider', PlingUiConfig]);\r\n\r\n    angular\r\n        .module('plingUiLite')\r\n        .run([ 'boot.options', '$injector', PlingUiRun ]);\r\n\r\n    function PlingUiConfig($provide, $httpProvider) {\r\n        $provide.decorator('$log', function ($delegate, shadowLogger) {\r\n            return shadowLogger($delegate);\r\n        });\r\n\r\n        // Interceptor that add token in each Header Request\r\n        $httpProvider.interceptors.push('plingRequestInterceptor');\r\n    }\r\n\r\n    function PlingUiRun(options, $injector) {\r\n        var cache = null;\r\n\r\n        if (options.onRun && options.onRun.cacheViews) {\r\n            cache = $injector.get('cacheService');\r\n            cache.cacheViews();\r\n        }\r\n    }\r\n}());\r\n","(function() {\r\n\r\n    'use strict';\r\n\r\n    angular\r\n        .module('plingUiLite')\r\n        .service('applicationsService', ApplicationsService);\r\n\r\n    ApplicationsService.$inject = [ '$window', '$localstorage', 'httpService', 'tokenService' ];\r\n\r\n    function ApplicationsService($window, $localstorage, httpService, tokenService) {\r\n\r\n        this.getLocal = function() {\r\n            var localAppData = $localstorage.get('PLING-APPS');\r\n\r\n            localAppData = localAppData ? JSON.parse(localAppData) : {};\r\n            return localAppData;\r\n        };\r\n\r\n        this.getCurrentAppModule = function() {\r\n            var currentAppModule = $localstorage.get('PLING-CURRENT-APP');\r\n\r\n            return currentAppModule;\r\n        };\r\n\r\n        this.getCurrentApp = function() {\r\n            var currentApp = {\r\n                'appModule': $localstorage.get('PLING-CURRENT-APP'),\r\n                'env': $localstorage.get('PLING-CURRENT-ENV')\r\n            };\r\n\r\n            return currentApp;\r\n        };\r\n\r\n        this.getCallbackUrl = function(appId, cb) {\r\n            httpService.post('accounts', '_oauth', { 'appid': appId })\r\n                .success(function (data) {\r\n                    if (data.callbackUrl) {\r\n                        cb(null, data.callbackUrl + '?token=' + tokenService.get());\r\n                    } else {\r\n                        cb('Callback url not found');\r\n                    }\r\n                })\r\n                .error(function (reason) {\r\n                    cb(reason || 'Server Unavailable', null);\r\n                });\r\n        };\r\n\r\n        this.redirect = function(url) {\r\n            $window.location.href = url;\r\n        };\r\n\r\n    }\r\n\r\n}());","(function () {\r\n    'use strict';\r\n\r\n    CardValidatorService.$inject = [ ];\r\n\r\n    angular.module('plingUiLite').service('cardValidatorService', CardValidatorService);\r\n\r\n    function CardValidatorService() {\r\n        var types = [];\r\n\r\n        types.push({\r\n            'niceType' : 'Visa',\r\n            'type' : 1,\r\n            'prefixPattern' : /^4$/,\r\n            'exactPattern' : /^4\\d*$/,\r\n            'gaps' : [4, 8, 12],\r\n            'lengths' : [16],\r\n            'code' : {\r\n                'name' : 'CVV',\r\n                'size' : 3\r\n            }\r\n        });\r\n\r\n        types.push({\r\n            'niceType' : 'MasterCard',\r\n            'type' : 2,\r\n            'prefixPattern' : /^(5|5[1-5]|2|22|222|222[1-9]|2[3-6]|27[0-1]|2720)$/,\r\n            'exactPattern' : /^(5[1-5]|222[1-9]|2[3-6]|27[0-1]|2720)\\d*$/,\r\n            'gaps' : [4, 8, 12],\r\n            'lengths' : [16],\r\n            'code' : {\r\n                'name' : 'CVV',\r\n                'size' : 3\r\n            }\r\n        });\r\n\r\n        function luhn10(identifier) {\r\n            var sum = 0;\r\n            var alt = false;\r\n            var i = identifier.length - 1;\r\n            var num;\r\n\r\n            while (i >= 0) {\r\n                num = parseInt(identifier.charAt(i), 10);\r\n\r\n                if (alt) {\r\n                    num *= 2;\r\n                    if (num > 9) {\r\n                        num = (num % 10) + 1; // eslint-disable-line no-extra-parens\r\n                    }\r\n                }\r\n\r\n                alt = !alt;\r\n\r\n                sum += num;\r\n\r\n                i--;\r\n            }\r\n\r\n            return sum % 10 === 0;\r\n        }\r\n\r\n        function validateDate (date) {\r\n            var now = new Date();\r\n            var month = parseInt(date.substr(0, 2), 10) - 1;\r\n            var year = parseInt(date.substr(2, 2), 10) + 2000;\r\n\r\n            if (month < 0 || month > 11 || year - now.getFullYear() > 15)\r\n                return false;\r\n\r\n            return new Date(year, month, 1).getTime() > now.getTime();\r\n        }\r\n\r\n        this.getValidYears = function() {\r\n            var i;\r\n            var nowYear = new Date().getFullYear();\r\n            var validYears = [];\r\n\r\n            for (i = nowYear; i <= nowYear + 15; i++)\r\n                validYears.push(i);\r\n\r\n            return validYears;\r\n        };\r\n\r\n        this.validate = function (cardNumber, dateExpiration, cvv) {\r\n            var number, numberResult, dateResult, i, validType;\r\n\r\n            if (!cardNumber)\r\n                return {\r\n                    'isValid' : false,\r\n                    'type'    : null\r\n                };\r\n\r\n            number = cardNumber.toString();\r\n\r\n            for (i=0; i<types.length; i++) {\r\n                if (types[i].exactPattern.test(number)) {\r\n                    validType = types[i];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!validType)\r\n                return {\r\n                    'isValid' : false,\r\n                    'type'    : null\r\n                };\r\n\r\n            numberResult = luhn10(number);\r\n            dateResult = validateDate(dateExpiration);\r\n\r\n            return {\r\n                'isValid' : numberResult && dateResult && cvv.length >= 3,\r\n                'type'    : validType\r\n            };\r\n        };\r\n\r\n        this.validateDate = function (dateExpiration) {\r\n            var dateResult;\r\n\r\n            dateResult = validateDate(dateExpiration);\r\n\r\n            return {\r\n                'isValid' : dateResult\r\n            };\r\n        };\r\n\r\n        this.validateCardNumber = function (cardNumber) {\r\n            var number, numberResult, i, validType;\r\n\r\n            if (!cardNumber)\r\n                return {\r\n                    'isValid'  : false,\r\n                    'type'     : null\r\n                };\r\n\r\n            number = cardNumber.toString();\r\n\r\n            for (i=0; i<types.length; i++) {\r\n                if (types[i].exactPattern.test(number)) {\r\n                    validType = types[i];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!validType)\r\n                return {\r\n                    'isValid' : false,\r\n                    'type'    : null\r\n                };\r\n\r\n            numberResult = luhn10(number);\r\n\r\n            return {\r\n                'isValid' : numberResult,\r\n                'type'    : validType\r\n            };\r\n        };\r\n    }\r\n\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('plingUiLite')\r\n        .service('cepService', CepService);\r\n\r\n    CepService.$inject = [ 'httpService' ];\r\n\r\n    function CepService(httpService) {\r\n\r\n        this.getCep = function (cep) {\r\n            return httpService.get('smart', 'cep', cep);\r\n        };\r\n    }\r\n\r\n}());","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('plingUiLite')\r\n        .service('coreApiService', CoreApiService);\r\n\r\n    CoreApiService.$inject = [ 'boot.options', '$window', '$rootScope', '$http' ];\r\n\r\n    function CoreApiService(options, $window, $rootScope, $http) {\r\n\r\n        var self = this;\r\n\r\n        /*\r\n        *  url do core obtido do conf.json da aplicacao corrente concatenado com parametros\r\n        * @param {string} nome da aplicacao. ex: 'accounts', 'drive', 'integra'\r\n        * @param {string} nome do modulo. ex: 'contactPreferences', 'users/list'.\r\n        * @returns {string} concatenacao da url do core com parametros.\r\n        */\r\n        this.getAppCoreUrl = function (app, module) {\r\n            var url;\r\n\r\n            url = options.core_url + options.def_api_version;\r\n\r\n            url += app ? '/' + app : '';\r\n            url += module ? '/' + module : '';\r\n\r\n            return url;\r\n        };\r\n\r\n        // Returns Application name capitalizing the first letter with UpperCase\r\n        this.getApplicationName = function () {\r\n            return options.def_api_app.charAt(0).toUpperCase() + options.def_api_app.slice(1);\r\n        };\r\n\r\n        this.redirectToLoginWithCallback = function(callbackUrl) {\r\n            var callbackQueryString;\r\n\r\n            $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', true);\r\n\r\n            // Seta callback url\r\n            callbackQueryString = callbackUrl ? '?callbackurl=' + callbackUrl : '';\r\n\r\n            // Busca a URL do login por ambiente (conf.json)\r\n            $http.get(self.getAppCoreUrl('accounts', 'products/Login/' + options.environment))\r\n                .success(function(data) {\r\n                    if (data)\r\n                        $window.location.href = data.callbackUrl + callbackQueryString;\r\n                })\r\n                .error(function() {\r\n                    console.log('Erro ao obter URL para aplicação de Login'); // eslint-disable-line\r\n                    $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', false);\r\n                    return false;\r\n                });\r\n        };\r\n\r\n        this.redirectToControlPanel = function() {\r\n            $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', true);\r\n\r\n            $http.get(self.getAppCoreUrl('accounts', 'products/Painel/' + options.environment))\r\n                .success(function(data) {\r\n                    if (data)\r\n                        $window.location.href = data.callbackUrl;\r\n                })\r\n                .error(function() {\r\n                    console.log('Erro ao obter URL para Minha Conta'); // eslint-disable-line\r\n                    $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', false);\r\n                    return false;\r\n                });\r\n        };\r\n\r\n        this.getSocialMedia = function() {\r\n            return {\r\n                'facebook' : options.facebook,\r\n                'twitter'  : options.twitter\r\n            };\r\n        };\r\n\r\n        this.getCurrentBusiness =  function () {\r\n            return options.current_business || 'psicologia';\r\n        };\r\n    }\r\n\r\n}());","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('plingUiLite')\r\n        .service('credentialsService', CredentialsService);\r\n\r\n    CredentialsService.$inject = [ 'httpService', '$localstorage', 'coreApiService', '$q' ];\r\n\r\n    function CredentialsService(httpService, $localstorage, core, $q) {\r\n\r\n        function getCredential(cb) {\r\n            httpService.get('accounts', 'me')\r\n                .success(function(data) {\r\n                    $localstorage.setObject('PLING-USER', data);\r\n                    return cb(null, data);\r\n                })\r\n                .error(function(reason) {\r\n                    console.log(reason); // eslint-disable-line\r\n                    return cb(reason);\r\n                });\r\n        }\r\n\r\n        this.logout = function () {\r\n            // Consumir o Core para o token entrar em Blacklist\r\n            httpService.post('accounts', 'logout')\r\n                .success(function() {\r\n                    $localstorage.clearAll();\r\n                    core.redirectToLoginWithCallback();\r\n                })\r\n                .error(function(reason) {\r\n                    console.log(reason); // eslint-disable-line no-console\r\n                });\r\n        };\r\n\r\n        this.login = function(credential) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.post('accounts', 'login', credential)\r\n                .success(function(loginData) {\r\n                    $localstorage.set('PLING-TOKEN', loginData.token);\r\n\r\n                    getCredential(function(err, credential) {\r\n                        if (err)\r\n                            return deferred.reject(err);\r\n\r\n                        return deferred.resolve(credential);\r\n                    });\r\n                })\r\n                .error(function(reason) {\r\n                    console.log(reason); // eslint-disable-line\r\n                    return deferred.reject(reason);\r\n                });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.getLocal = function () {\r\n            var userData = $localstorage.get('PLING-USER');\r\n\r\n            if (!userData) return null;\r\n\r\n            userData = JSON.parse(userData);\r\n            return userData;\r\n        };\r\n\r\n    }\r\n\r\n}());","(function() {\r\n    'use strict';\r\n\r\n    CustomersService.$inject = ['$localstorage', 'httpService', '$q'];\r\n\r\n    angular.module('plingUiLite').service('customersService', CustomersService);\r\n\r\n    function CustomersService($localstorage, httpService, $q) {\r\n\r\n        this.createCustomer = function(customer) {\r\n            var deferred = $q.defer();\r\n            var env = $localstorage.get('PLING-CURRENT-ENV');\r\n\r\n            httpService.post('accounts', 'customers/admin/' + env, customer)\r\n                .success(function(customerData) {\r\n                    deferred.resolve(customerData);\r\n                })\r\n                .error(function(reason) {\r\n                    console.log(reason); // eslint-disable-line\r\n                    deferred.reject(reason);\r\n                });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.updateCustomer = function(customer) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.put('accounts', 'customers', customer)\r\n                .success(function(data) {\r\n                    deferred.resolve(data);\r\n                })\r\n                .error(function(reason) {\r\n                    console.log(reason); // eslint-disable-line\r\n                    deferred.reject(reason);\r\n                });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.getCustomer = function(customerId) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.get('accounts', 'customers', customerId)\r\n                .success(function(data) {\r\n                    deferred.resolve(data);\r\n                })\r\n                .error(function(reason) {\r\n                    deferred.reject(reason);\r\n                });\r\n\r\n            return deferred.promise;\r\n        };\r\n    }\r\n\r\n}());","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('plingUiLite')\r\n        .service('httpHelperService', HttpHelperService);\r\n\r\n    HttpHelperService.$inject = [ '$http', 'coreApiService', '$q' ];\r\n\r\n    function HttpHelperService($http, core, $q) {\r\n\r\n        var groups = {};\r\n\r\n        this.registerUrl = function (url, groupName) {\r\n            var defer;\r\n\r\n            if (!groupName)\r\n                groupName = 'default';\r\n\r\n            if (!groups[groupName]) {\r\n                defer = $q.defer();\r\n                groups[groupName] = defer;\r\n            } else\r\n                defer = groups[groupName];\r\n\r\n            return defer.promise;\r\n        };\r\n\r\n        this.cancelRequest = function (groupName) {\r\n            if (!groupName)\r\n                groupName = 'default';\r\n\r\n            groups[groupName].resolve('cancelled');\r\n            delete groups[groupName];\r\n        };\r\n    }\r\n\r\n}());","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('plingUiLite')\r\n        .service('httpService', HttpService);\r\n\r\n    HttpService.$inject = [ '$http', 'coreApiService', 'httpHelperService' ];\r\n\r\n    function HttpService($http, core) {\r\n\r\n        this.save = function (app, module, data) {\r\n            return $http.post(core.getAppCoreUrl(app, module), data);\r\n        };\r\n\r\n        this.update = function (app, module, data) {\r\n            return $http.put(core.getAppCoreUrl(app, module), data);\r\n        };\r\n\r\n        this.upload = function (app, module, file) {\r\n            return $http\r\n               .post(core.getAppCoreUrl(app, module), file, {\r\n                   'transformRequest' : angular.identity,\r\n                   'headers'          : { 'Content-Type': undefined }  // eslint-disable-line\r\n               });\r\n        };\r\n\r\n        this.get = function (app, module, id) {\r\n            var url = core.getAppCoreUrl(app, module),\r\n                type;\r\n\r\n            if (id) {\r\n                url += '/' + id;\r\n            } else if (module.indexOf('public') > 0) {\r\n                type = {\r\n                    'responseType': 'arraybuffer'\r\n                };\r\n            }\r\n            return $http.get(url, type);\r\n        };\r\n\r\n        this.getImage = function (url, cb) {\r\n            this.get('credentials/public?imagepath=' + url)\r\n                .success(function (imageDownloadData) {\r\n                    var blob   = new Blob([ imageDownloadData ], { 'type': 'image/jpeg' }),\r\n                        reader = new FileReader();\r\n\r\n                    reader.readAsDataURL(blob);\r\n                    reader.onloadend = function () {\r\n                        cb(null, reader.result);\r\n                    };\r\n                    // cb(null, objectUrl);\r\n                })\r\n                .error(function (err) {\r\n                    cb(err);\r\n                });\r\n        };\r\n\r\n        this.post = function (app, module, data) {\r\n            var req = {\r\n                'method'  : 'POST',\r\n                'url'     : core.getAppCoreUrl(app, module),\r\n                'headers' : {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                'data': data\r\n            };\r\n\r\n            return $http(req);\r\n        };\r\n\r\n        this.put = function (app, module, data) {\r\n            var req = {\r\n                'method'  : 'PUT',\r\n                'url'     : core.getAppCoreUrl(app, module),\r\n                'headers' : {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                'data': data\r\n            };\r\n\r\n            return $http(req);\r\n        };\r\n\r\n        this.delete = function (app, module, id) {\r\n            var req = {\r\n                'method'  : 'DELETE',\r\n                'url'     : core.getAppCoreUrl(app, module) + '/' + id,\r\n                'headers' : {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            };\r\n\r\n            return $http(req);\r\n        };\r\n\r\n    }\r\n\r\n}());\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('plingUiLite')\r\n        .service('tokenService', TokenService);\r\n\r\n    TokenService.$inject = [ '$http', '$localstorage', 'coreApiService' ];\r\n\r\n    function TokenService($http, $localstorage, coreApiService) {\r\n\r\n        this.get = function() {\r\n            return $localstorage.get('PLING-TOKEN');\r\n        };\r\n\r\n        this.set = function(token) {\r\n            if (token) {\r\n                $localstorage.set('PLING-TOKEN', token);\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        this.validate = function (cb) {\r\n            $http.get(coreApiService.getAppCoreUrl('accounts', 'me'))\r\n                .success(function(credentialData) {\r\n                    cb(null, credentialData);\r\n                })\r\n                .error(function(reason) {\r\n                    cb(reason);\r\n                });\r\n        };\r\n\r\n    }\r\n\r\n}());","(function (context, logger) {\r\n    'use strict';\r\n\r\n    // creating namespace\r\n    function Bootstrapper() {\r\n        this.isBootstrapped = false;\r\n    }\r\n\r\n    // boot a module\r\n    Bootstrapper.prototype.Angular = function (root, appname, source, cb) {\r\n        var self = this;\r\n\r\n        window.localStorage.setItem('PLING-CURRENT-APP', appname);\r\n\r\n        // loading file\r\n        context.loader.load(source, function (err, options) {\r\n\r\n            options.core_url = options.environment === 'local' ? options.local_core_url || options.core_url : options.core_url;\r\n\r\n            var // eslint-disable-line\r\n                token         = window.localStorage['PLING-TOKEN'],\r\n                queryString   = window.localStorage['PLING-QUERY-STRING'] || window.location.search,\r\n                coreUrl       = options.core_url,\r\n                environment   = options.environment,\r\n                defApiVersion = options.def_api_version,\r\n                initInjector  = angular.injector(['ng']),\r\n                $http         = initInjector.get('$http'),\r\n                currentUrl    = window.location.href,\r\n                localCallbackUrl;\r\n\r\n            window.localStorage.setItem('PLING-CURRENT-ENV', environment);\r\n\r\n            // checking errors...\r\n            if (err) {\r\n                logger.warn('Arquivo de configuracao nao encontrado!');\r\n                logger.debug(err);\r\n\r\n                return false;\r\n            }\r\n\r\n            // No authentication\r\n            if ('auth' in options && options.auth === false) {\r\n                if (!token) {\r\n                    // saving boot settings\r\n                    angular.module(appname).value('boot.options', options); // eslint-disable-line\r\n\r\n                    // starting app\r\n                    angular.bootstrap(root, [appname]);\r\n                    self.isBootstrapped = true;\r\n\r\n                    // calling callback\r\n                    if (cb) cb();\r\n                }\r\n                else {\r\n                    $http\r\n                    .get(coreUrl + defApiVersion + '/accounts/me' + '?appmodule=' + appname + '&environment=' + environment, {\r\n                        'headers': { 'Authorization': token }\r\n                    })\r\n                    .success(function(credentialData) {\r\n                        window.localStorage.setItem('PLING-APPS', JSON.stringify(credentialData.profilesProducts));\r\n\r\n                        delete credentialData.profilesProducts;\r\n                        delete credentialData.iat;\r\n                        delete credentialData.exp;\r\n\r\n                        window.localStorage.setItem('PLING-USER', JSON.stringify(credentialData));\r\n\r\n                        // saving boot settings\r\n                        angular.module(appname).value('boot.options', options); // eslint-disable-line\r\n\r\n                        // starting app\r\n                        angular.bootstrap(root, [appname]);\r\n                        self.isBootstrapped = true;\r\n\r\n                        // calling callback\r\n                        if (cb) cb();\r\n                    })\r\n                    .error(function(reason) {\r\n                        logger.error(reason);\r\n                        window.localStorage.clear();\r\n                        window.localStorage.setItem('PLING-CURRENT-APP', appname);\r\n                        window.localStorage.setItem('PLING-CURRENT-ENV', environment);\r\n                        // saving boot settings\r\n                        angular.module(appname).value('boot.options', options); // eslint-disable-line\r\n                        // starting app\r\n                        angular.bootstrap(root, [appname]);\r\n                        self.isBootstrapped = true;\r\n                    });\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            // checking for the token\r\n            if (!token && queryString.indexOf('token=') === 1) {\r\n                window.localStorage.setItem('PLING-TOKEN', queryString.split('=')[1]);\r\n            }\r\n\r\n            // if there's no token it must redirect to login\r\n            if (!token && coreUrl) {\r\n                window.localStorage.clear();\r\n                localCallbackUrl = currentUrl ? '?callbackurl=' + currentUrl : '';\r\n                $http\r\n                    .get(coreUrl + defApiVersion + '/accounts/products/Login/' + environment)\r\n                    .success(function(urlData) {\r\n                        window.location.href = urlData.callbackUrl + localCallbackUrl;\r\n                        return false;\r\n                    })\r\n                    .error(function(reason) {\r\n                        logger.error(reason);\r\n                        return false;\r\n                    });\r\n            }\r\n\r\n            // else it must validate it and then start the application\r\n            else {\r\n                $http\r\n                    .get(coreUrl + defApiVersion + '/accounts/me' + '?appmodule=' + appname + '&environment=' + environment, {\r\n                        'headers': { 'Authorization': token }\r\n                    })\r\n                    .success(function(credentialData) {\r\n\r\n                        window.localStorage.setItem('PLING-APPS', JSON.stringify(credentialData.profilesProducts));\r\n\r\n                        if (credentialData.modules) {\r\n                            window.localStorage.setItem('PLING-MODULES', JSON.stringify(credentialData.modules));\r\n\r\n                            pling.loader.settings.menu    = []; // eslint-disable-line\r\n                            pling.loader.settings.submenu = []; // eslint-disable-line\r\n\r\n                            credentialData.modules.forEach(function(module) {\r\n                                if (module.config.isSubMenu) {\r\n                                    pling.loader.settings.submenu.push(module); // eslint-disable-line\r\n                                } else if (module.config.isMenu && !module.config.isSubMenu) {\r\n                                    pling.loader.settings.menu.push(module);    // eslint-disable-line\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        if (credentialData.viewPreferences)\r\n                            window.localStorage.setItem('PLING-CURRENT-VIEW-PREFERENCES', JSON.stringify(credentialData.viewPreferences));\r\n\r\n                        delete credentialData.profilesProducts;\r\n                        delete credentialData.iat;\r\n                        delete credentialData.exp;\r\n\r\n                        window.localStorage.setItem('PLING-USER', JSON.stringify(credentialData));\r\n\r\n                        // saving boot settings\r\n                        angular.module(appname).value('boot.options', options); // eslint-disable-line\r\n\r\n                        // starting app\r\n                        angular.bootstrap(root, [appname]);\r\n                        self.isBootstrapped = true;\r\n\r\n                        // calling callback\r\n                        if (cb) cb();\r\n                    })\r\n                    .error(function(reason) {\r\n                        logger.error(reason);\r\n                        window.localStorage.clear();\r\n                        localCallbackUrl = currentUrl ? '?callbackurl=' + currentUrl : '';\r\n                        $http\r\n                            .get(coreUrl + defApiVersion + '/accounts/Login/' + environment)\r\n                            .success(function(urlData) {\r\n                                window.location.href = urlData.callbackUrl + localCallbackUrl;\r\n                                return false;\r\n                            })\r\n                            .error(function(reason) {\r\n                                logger.error(reason);\r\n                                return false;\r\n                            });\r\n                    });\r\n            }\r\n        });\r\n    };\r\n\r\n    // creating instance\r\n    context.boot = new Bootstrapper();\r\n\r\n}(window.pling, window.console));","(function (dom, logger, context) {\r\n    'use strict';\r\n\r\n    // Content Loaded listener\r\n    function onDOMLoaded() {\r\n\r\n        // detect angular application 'directive'\r\n        var root,\r\n            directive = 'plg-app',\r\n            source    = 'src',\r\n            filter    = '[' + directive + ']';\r\n\r\n        // retrieving root element\r\n        root = dom.querySelector(filter);\r\n\r\n        // working on root\r\n        if (root) {\r\n\r\n            // retrieving app name\r\n            context.name   = root.getAttribute(directive);\r\n            context.source = root.getAttribute(source) || 'pling.conf.json';\r\n\r\n            // loading config file\r\n            logger.info('AngularJS 1.5.x spa check:', true);\r\n            context.boot.Angular(root, context.name, context.source, function (err) {\r\n\r\n                if (err) logger.error('Could not boot app ', context.name);\r\n                else logger.info('Bootstrapped:', context.boot.isBootstrapped);\r\n\r\n            });\r\n\r\n        } else {\r\n            logger.info('AngularJS 1.5.x spa check:', false);\r\n        }\r\n    }\r\n\r\n    dom.addEventListener('DOMContentLoaded', onDOMLoaded);\r\n\r\n}(document, window.console, window.pling));","(function (context) {\r\n    'use strict';\r\n\r\n    // creating namespace\r\n    function ConfLoader() {\r\n        this.settings = null;\r\n    }\r\n\r\n    // loading file\r\n    ConfLoader.prototype.load = function (filepath, cb) {\r\n        var self = this,\r\n            parsed,\r\n            xhr = new XMLHttpRequest(); // eslint-disable-line\r\n\r\n        // sending result\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200) {\r\n\r\n                    parsed = JSON.parse(xhr.responseText);\r\n                    self.settings = parsed;\r\n\r\n                    cb(null, parsed);\r\n                } else {\r\n                    cb('Error loading file - status ' + xhr.status, {});\r\n                }\r\n            }\r\n        };\r\n\r\n        // handling error\r\n        xhr.onerror = function (err) {\r\n            cb(err);\r\n        };\r\n\r\n        // fetching file\r\n        xhr.open('GET', filepath, true);\r\n        xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\r\n        xhr.send();\r\n    };\r\n\r\n    // creating instance\r\n    context.loader = new ConfLoader();\r\n}(window.pling));","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('plingUiLite')\r\n        .service('cacheService', CachingService);\r\n\r\n    CachingService.$inject = [ '$templateCache', '$route', '$http' ];\r\n\r\n    function CachingService($templateCache, $route, $http) {\r\n\r\n\r\n        this.cacheViews = function (cacheObj, routeObj) {\r\n\r\n            // setting defaults\r\n            var\r\n                partial, route,\r\n                viewCache = cacheObj || $templateCache,\r\n                router = routeObj || $route;\r\n\r\n            // looping routes\r\n            for (route in router.routes) {\r\n\r\n                if (router.routes.hasOwnProperty(route)) {\r\n\r\n                    // evaluate partial\r\n                    partial = router.routes[route].templateUrl;\r\n\r\n                    if (partial)\r\n                        // caching route\r\n                        $http.get(partial, {'cache': viewCache});\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n}());\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('plingUiLite')\r\n        .service('$localstorage', $LocalStorage);\r\n\r\n    $LocalStorage.$inject = [ '$window' ];\r\n\r\n    function $LocalStorage($window) {\r\n        return {\r\n\r\n            'clearAll': function () {\r\n                $window.localStorage.clear();\r\n            },\r\n\r\n            'set': function (key, value) {\r\n                $window.localStorage[key] = value;\r\n            },\r\n\r\n            'get': function (key) {\r\n                return $window.localStorage[key];\r\n            },\r\n\r\n            'setObject': function (key, value) {\r\n                $window.localStorage[key] = JSON.stringify(value);\r\n            },\r\n\r\n            'getObject': function (key) {\r\n                return JSON.parse($window.localStorage[key] || '{}');\r\n            }\r\n        };\r\n    }\r\n\r\n}());","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('plingUiLite')\r\n        .service('sessionstorage', $SessionStorage);\r\n\r\n    $SessionStorage.$inject = [ '$window' ];\r\n\r\n    function $SessionStorage($window) {\r\n        return {\r\n\r\n            'clearAll': function () {\r\n                $window.localStorage.clear();\r\n            },\r\n\r\n            'set': function (key, value) {\r\n                $window.localStorage[key] = value;\r\n            },\r\n\r\n            'get': function (key) {\r\n                return $window.localStorage[key];\r\n            },\r\n\r\n            'setObject': function (key, value) {\r\n                $window.localStorage[key] = JSON.stringify(value);\r\n            },\r\n\r\n            'getObject': function (key) {\r\n                return JSON.parse($window.localStorage[key] || '{}');\r\n            }\r\n        };\r\n    }\r\n\r\n}());","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('plingUiLite')\r\n        .factory('plingRequestInterceptor', PlingRequestInterceptor);\r\n\r\n    PlingRequestInterceptor.$inject = [ '$q', '$window' ];\r\n\r\n    function PlingRequestInterceptor($q, $window) {\r\n\r\n        return {\r\n\r\n            // On request\r\n            'request': function (config) {\r\n                var isAuth = $window.localStorage.getItem('PLING-TOKEN');\r\n\r\n                // Add Token info to every request\r\n                if (isAuth !== false)\r\n                    config.headers.Authorization = $window.localStorage.getItem('PLING-TOKEN');\r\n\r\n                return config;\r\n            },\r\n\r\n            // On request error\r\n            'requestError': function (reason) {\r\n\r\n                // Return the promise error reason.\r\n                return $q.reject(reason);\r\n            },\r\n\r\n            // On response success\r\n            'response': function (response) {\r\n\r\n                // Return the response or promise.\r\n                return response || $q.when(response);\r\n            },\r\n\r\n            // On response error\r\n            'responseError': function (reason) {\r\n\r\n                // Return the promise error reason.\r\n                return $q.reject(reason);\r\n            }\r\n\r\n        };\r\n    }\r\n\r\n}(document, window.console, window.pling));","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('plingUiLite')\r\n        .factory('$exceptionHandler', PlingUiExceptionHandler);\r\n\r\n    PlingUiExceptionHandler.$inject = ['$injector'];\r\n\r\n    function PlingUiExceptionHandler($injector) {\r\n\r\n        return function (exception, cause) {\r\n\r\n            // preparing message to be dispatched\r\n            var dispatcher = null,\r\n                logger = null,\r\n                data = {\r\n                    'error': exception,\r\n                    'details': cause\r\n                };\r\n\r\n            // logging\r\n            logger = $injector.get('$log');\r\n            logger.error(exception);\r\n\r\n            if (cause) {\r\n                logger.debug(cause);\r\n            }\r\n\r\n            // dispatching message\r\n            dispatcher = $injector.get('$rootScope');\r\n            dispatcher.$broadcast('PLINGUI_INTERNAL_ERROR', data);\r\n        };\r\n    }\r\n\r\n}());","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('plingUiLite')\r\n        .factory('shadowLogger', PlingUiLogger);\r\n\r\n    function PlingUiLogger() {\r\n\r\n        return function ($delegate) {\r\n\r\n            return {\r\n\r\n                'log': function () {\r\n                    this.dispatch('log', arguments);\r\n                },\r\n\r\n                'info': function () {\r\n                    this.dispatch('info', arguments);\r\n                },\r\n\r\n                'error': function () {\r\n                    this.dispatch('error', arguments);\r\n                },\r\n\r\n                'warn': function () {\r\n                    this.dispatch('warn', arguments);\r\n                },\r\n\r\n                'dispatch': function (method, params) {\r\n                    // defining method\r\n                    var proc = $delegate[method] || $delegate.log,\r\n                        stamp = new Date().toString(),\r\n                        prefix = '[' + stamp + '][' + method + ']::',\r\n                        msg = [],\r\n                        arg;\r\n\r\n                    if (method) {\r\n                        // preparing msg\r\n                        msg.push(prefix);\r\n\r\n                        // joining params\r\n                        for (arg in params) {\r\n                            if (params.hasOwnProperty(arg)) {\r\n                                msg.push(params[arg]);\r\n                            }\r\n                        }\r\n\r\n                        // applying log info\r\n                        proc.apply(null, msg);\r\n                    }\r\n                }\r\n            };\r\n        };\r\n    }\r\n}());"]}