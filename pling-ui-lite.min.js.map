{"version":3,"sources":["main.js","app-module.js","core/boot/bootstrapper.js","core/boot/index.js","core/boot/loader.js","core/caching/caching-service.js","core/commons/localstorage-service.js","core/commons/sessionstorage-service.js","core/apis/applications-service.js","core/apis/cep-service.js","core/apis/coreapi-service.js","core/apis/credentials-service.js","core/apis/http-helper.js","core/apis/http-service.js","core/apis/token-service.js","core/debugging/error-handler.js","core/debugging/logger.js","core/config/interceptor-factory.js"],"names":["context","pling","window","PlingUiConfig","$provide","$httpProvider","decorator","$delegate","shadowLogger","interceptors","push","PlingUiRun","options","$injector","cache","onRun","cacheViews","get","angular","module","config","run","logger","Bootstrapper","this","isBootstrapped","prototype","Angular","root","appname","source","cb","self","localStorage","setItem","loader","load","err","core_url","environment","local_core_url","localCallbackUrl","token","queryString","location","search","coreUrl","defApiVersion","def_api_version","initInjector","injector","$http","currentUrl","href","warn","debug","auth","headers","Authorization","success","credentialData","JSON","stringify","profilesProducts","iat","exp","value","bootstrap","error","reason","clear","indexOf","split","urlData","callbackUrl","modules","settings","menu","submenu","forEach","isSubMenu","isMenu","viewPreferences","boot","console","dom","onDOMLoaded","directive","filter","querySelector","name","getAttribute","info","addEventListener","document","ConfLoader","filepath","parsed","xhr","XMLHttpRequest","onreadystatechange","readyState","status","parse","responseText","onerror","open","setRequestHeader","send","CachingService","$templateCache","$route","cacheObj","routeObj","partial","route","viewCache","router","routes","hasOwnProperty","templateUrl","service","$inject","$LocalStorage","$window","clearAll","set","key","setObject","getObject","$SessionStorage","ApplicationsService","$localstorage","httpService","tokenService","getLocal","localAppData","getCurrentAppModule","currentAppModule","getCurrentApp","currentApp","appModule","env","getCallbackUrl","appId","post","appid","data","redirect","url","CepService","getCep","cep","CoreApiService","$rootScope","getAppCoreUrl","app","getApplicationName","def_api_app","charAt","toUpperCase","slice","redirectToLoginWithCallback","callbackQueryString","$emit","log","redirectToControlPanel","getSocialMedia","facebook","twitter","CredentialsService","core","logout","userData","HttpHelperService","$q","groups","registerUrl","groupName","defer","promise","cancelRequest","resolve","HttpService","save","update","put","upload","file","transformRequest","identity","Content-Type","undefined","id","type","responseType","getImage","imageDownloadData","blob","Blob","reader","FileReader","readAsDataURL","onloadend","result","req","method","TokenService","coreApiService","validate","PlingUiExceptionHandler","exception","cause","dispatcher","details","$broadcast","factory","PlingUiLogger","dispatch","arguments","params","arg","proc","stamp","Date","toString","prefix","msg","apply","PlingRequestInterceptor","request","isAuth","getItem","requestError","reject","response","when","responseError"],"mappings":"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","file":"pling-ui-lite.min.js","sourcesContent":["(function (context) {\n    'use strict';\n\n    context.pling = {};\n\n}(window));\n","(function () {\n    'use strict';\n\n    angular\n        .module('plingUiLite', []);\n\n    angular\n        .module('plingUiLite')\n        .config(['$provide', '$httpProvider', PlingUiConfig]);\n\n    angular\n        .module('plingUiLite')\n        .run([ 'boot.options', '$injector', PlingUiRun ]);\n\n    function PlingUiConfig($provide, $httpProvider) {\n        $provide.decorator('$log', function ($delegate, shadowLogger) {\n            return shadowLogger($delegate);\n        });\n\n        // Interceptor that add token in each Header Request\n        $httpProvider.interceptors.push('plingRequestInterceptor');\n    }\n\n    function PlingUiRun(options, $injector) {\n        var cache = null;\n\n        if (options.onRun && options.onRun.cacheViews) {\n            cache = $injector.get('cacheService');\n            cache.cacheViews();\n        }\n    }\n}());\n","(function (context, logger) {\n    'use strict';\n\n    // creating namespace\n    function Bootstrapper() {\n        this.isBootstrapped = false;\n    }\n\n    // boot a module\n    Bootstrapper.prototype.Angular = function (root, appname, source, cb) {\n        var self = this;\n\n        window.localStorage.setItem('PLING-CURRENT-APP', appname);\n\n        // loading file\n        context.loader.load(source, function (err, options) {\n\n            options.core_url = options.environment === 'local' ? options.local_core_url || options.core_url : options.core_url;\n\n            var // eslint-disable-line\n                token         = window.localStorage['PLING-TOKEN'],\n                queryString   = window.localStorage['PLING-QUERY-STRING'] || window.location.search,\n                coreUrl       = options.core_url,\n                environment   = options.environment,\n                defApiVersion = options.def_api_version,\n                initInjector  = angular.injector(['ng']),\n                $http         = initInjector.get('$http'),\n                currentUrl    = window.location.href,\n                localCallbackUrl;\n\n            window.localStorage.setItem('PLING-CURRENT-ENV', environment);\n\n            // checking errors...\n            if (err) {\n                logger.warn('Arquivo de configuracao nao encontrado!');\n                logger.debug(err);\n\n                return false;\n            }\n\n            // No authentication\n            if ('auth' in options && options.auth === false) {\n                if (!token) {\n                    // saving boot settings\n                    angular.module(appname).value('boot.options', options); // eslint-disable-line\n\n                    // starting app\n                    angular.bootstrap(root, [appname]);\n                    self.isBootstrapped = true;\n\n                    // calling callback\n                    if (cb) cb();\n                }\n                else {\n                    $http\n                    .get(coreUrl + defApiVersion + '/accounts/me' + '?appmodule=' + appname + '&environment=' + environment, {\n                        'headers': { 'Authorization': token }\n                    })\n                    .success(function(credentialData) {\n                        window.localStorage.setItem('PLING-APPS', JSON.stringify(credentialData.profilesProducts));\n\n                        delete credentialData.profilesProducts;\n                        delete credentialData.iat;\n                        delete credentialData.exp;\n\n                        window.localStorage.setItem('PLING-USER', JSON.stringify(credentialData));\n\n                        // saving boot settings\n                        angular.module(appname).value('boot.options', options); // eslint-disable-line\n\n                        // starting app\n                        angular.bootstrap(root, [appname]);\n                        self.isBootstrapped = true;\n\n                        // calling callback\n                        if (cb) cb();\n                    })\n                    .error(function(reason) {\n                        logger.error(reason);\n                        window.localStorage.clear();\n                        window.localStorage.setItem('PLING-CURRENT-APP', appname);\n                        window.localStorage.setItem('PLING-CURRENT-ENV', environment);\n                        // saving boot settings\n                        angular.module(appname).value('boot.options', options); // eslint-disable-line\n                        // starting app\n                        angular.bootstrap(root, [appname]);\n                        self.isBootstrapped = true;\n                    });\n                }\n\n                return false;\n            }\n\n            // checking for the token\n            if (!token && queryString.indexOf('token=') === 1) {\n                window.localStorage.setItem('PLING-TOKEN', queryString.split('=')[1]);\n            }\n\n            // if there's no token it must redirect to login\n            if (!token && coreUrl) {\n                window.localStorage.clear();\n                localCallbackUrl = currentUrl ? '?callbackurl=' + currentUrl : '';\n                $http\n                    .get(coreUrl + defApiVersion + '/accounts/products/Login/' + environment)\n                    .success(function(urlData) {\n                        window.location.href = urlData.callbackUrl + localCallbackUrl;\n                        return false;\n                    })\n                    .error(function(reason) {\n                        logger.error(reason);\n                        return false;\n                    });\n            }\n\n            // else it must validate it and then start the application\n            else {\n                $http\n                    .get(coreUrl + defApiVersion + '/accounts/me' + '?appmodule=' + appname + '&environment=' + environment, {\n                        'headers': { 'Authorization': token }\n                    })\n                    .success(function(credentialData) {\n\n                        window.localStorage.setItem('PLING-APPS', JSON.stringify(credentialData.profilesProducts));\n\n                        if (credentialData.modules) {\n                            window.localStorage.setItem('PLING-MODULES', JSON.stringify(credentialData.modules));\n\n                            pling.loader.settings.menu    = []; // eslint-disable-line\n                            pling.loader.settings.submenu = []; // eslint-disable-line\n\n                            credentialData.modules.forEach(function(module) {\n                                if (module.config.isSubMenu) {\n                                    pling.loader.settings.submenu.push(module); // eslint-disable-line\n                                } else if (module.config.isMenu && !module.config.isSubMenu) {\n                                    pling.loader.settings.menu.push(module);    // eslint-disable-line\n                                }\n                            });\n                        }\n\n                        if (credentialData.viewPreferences)\n                            window.localStorage.setItem('PLING-CURRENT-VIEW-PREFERENCES', JSON.stringify(credentialData.viewPreferences));\n\n                        delete credentialData.profilesProducts;\n                        delete credentialData.iat;\n                        delete credentialData.exp;\n\n                        window.localStorage.setItem('PLING-USER', JSON.stringify(credentialData));\n\n                        // saving boot settings\n                        angular.module(appname).value('boot.options', options); // eslint-disable-line\n\n                        // starting app\n                        angular.bootstrap(root, [appname]);\n                        self.isBootstrapped = true;\n\n                        // calling callback\n                        if (cb) cb();\n                    })\n                    .error(function(reason) {\n                        logger.error(reason);\n                        window.localStorage.clear();\n                        localCallbackUrl = currentUrl ? '?callbackurl=' + currentUrl : '';\n                        $http\n                            .get(coreUrl + defApiVersion + '/accounts/Login/' + environment)\n                            .success(function(urlData) {\n                                window.location.href = urlData.callbackUrl + localCallbackUrl;\n                                return false;\n                            })\n                            .error(function(reason) {\n                                logger.error(reason);\n                                return false;\n                            });\n                    });\n            }\n        });\n    };\n\n    // creating instance\n    context.boot = new Bootstrapper();\n\n}(window.pling, window.console));","(function (dom, logger, context) {\n    'use strict';\n\n    // Content Loaded listener\n    function onDOMLoaded() {\n\n        // detect angular application 'directive'\n        var root,\n            directive = 'plg-app',\n            source    = 'src',\n            filter    = '[' + directive + ']';\n\n        // retrieving root element\n        root = dom.querySelector(filter);\n\n        // working on root\n        if (root) {\n\n            // retrieving app name\n            context.name   = root.getAttribute(directive);\n            context.source = root.getAttribute(source) || 'pling.conf.json';\n\n            // loading config file\n            logger.info('AngularJS 1.5.x spa check:', true);\n            context.boot.Angular(root, context.name, context.source, function (err) {\n\n                if (err) logger.error('Could not boot app ', context.name);\n                else logger.info('Bootstrapped:', context.boot.isBootstrapped);\n\n            });\n\n        } else {\n            logger.info('AngularJS 1.5.x spa check:', false);\n        }\n    }\n\n    dom.addEventListener('DOMContentLoaded', onDOMLoaded);\n\n}(document, window.console, window.pling));","(function (context) {\n    'use strict';\n\n    // creating namespace\n    function ConfLoader() {\n        this.settings = null;\n    }\n\n    // loading file\n    ConfLoader.prototype.load = function (filepath, cb) {\n        var self = this,\n            parsed,\n            xhr = new XMLHttpRequest(); // eslint-disable-line\n\n        // sending result\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n\n                    parsed = JSON.parse(xhr.responseText);\n                    self.settings = parsed;\n\n                    cb(null, parsed);\n                } else {\n                    cb('Error loading file - status ' + xhr.status, {});\n                }\n            }\n        };\n\n        // handling error\n        xhr.onerror = function (err) {\n            cb(err);\n        };\n\n        // fetching file\n        xhr.open('GET', filepath, true);\n        xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n        xhr.send();\n    };\n\n    // creating instance\n    context.loader = new ConfLoader();\n}(window.pling));","(function() {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('cacheService', CachingService);\n\n    CachingService.$inject = [ '$templateCache', '$route', '$http' ];\n\n    function CachingService($templateCache, $route, $http) {\n\n\n        this.cacheViews = function (cacheObj, routeObj) {\n\n            // setting defaults\n            var\n                partial, route,\n                viewCache = cacheObj || $templateCache,\n                router = routeObj || $route;\n\n            // looping routes\n            for (route in router.routes) {\n\n                if (router.routes.hasOwnProperty(route)) {\n\n                    // evaluate partial\n                    partial = router.routes[route].templateUrl;\n\n                    if (partial)\n                        // caching route\n                        $http.get(partial, {'cache': viewCache});\n                }\n            }\n        };\n    }\n\n}());\n","(function() {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('$localstorage', $LocalStorage);\n\n    $LocalStorage.$inject = [ '$window' ];\n\n    function $LocalStorage($window) {\n        return {\n\n            'clearAll': function () {\n                $window.localStorage.clear();\n            },\n\n            'set': function (key, value) {\n                $window.localStorage[key] = value;\n            },\n\n            'get': function (key) {\n                return $window.localStorage[key];\n            },\n\n            'setObject': function (key, value) {\n                $window.localStorage[key] = JSON.stringify(value);\n            },\n\n            'getObject': function (key) {\n                return JSON.parse($window.localStorage[key] || '{}');\n            }\n        };\n    }\n\n}());","(function () {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('sessionstorage', $SessionStorage);\n\n    $SessionStorage.$inject = [ '$window' ];\n\n    function $SessionStorage($window) {\n        return {\n\n            'clearAll': function () {\n                $window.localStorage.clear();\n            },\n\n            'set': function (key, value) {\n                $window.localStorage[key] = value;\n            },\n\n            'get': function (key) {\n                return $window.localStorage[key];\n            },\n\n            'setObject': function (key, value) {\n                $window.localStorage[key] = JSON.stringify(value);\n            },\n\n            'getObject': function (key) {\n                return JSON.parse($window.localStorage[key] || '{}');\n            }\n        };\n    }\n\n}());","(function() {\n\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('applicationsService', ApplicationsService);\n\n    ApplicationsService.$inject = [ '$window', '$localstorage', 'httpService', 'tokenService' ];\n\n    function ApplicationsService($window, $localstorage, httpService, tokenService) {\n\n        this.getLocal = function() {\n            var localAppData = $localstorage.get('PLING-APPS');\n\n            localAppData = localAppData ? JSON.parse(localAppData) : {};\n            return localAppData;\n        };\n\n        this.getCurrentAppModule = function() {\n            var currentAppModule = $localstorage.get('PLING-CURRENT-APP');\n\n            return currentAppModule;\n        };\n\n        this.getCurrentApp = function() {\n            var currentApp = {\n                'appModule': $localstorage.get('PLING-CURRENT-APP'),\n                'env': $localstorage.get('PLING-CURRENT-ENV')\n            };\n\n            return currentApp;\n        };\n\n        this.getCallbackUrl = function(appId, cb) {\n            httpService.post('accounts', '_oauth', { 'appid': appId })\n                .success(function (data) {\n                    if (data.callbackUrl) {\n                        cb(null, data.callbackUrl + '?token=' + tokenService.get());\n                    } else {\n                        cb('Callback url not found');\n                    }\n                })\n                .error(function (reason) {\n                    cb(reason || 'Server Unavailable', null);\n                });\n        };\n\n        this.redirect = function(url) {\n            $window.location.href = url;\n        };\n\n    }\n\n}());","(function() {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('cepService', CepService);\n\n    CepService.$inject = [ 'httpService' ];\n\n    function CepService(httpService) {\n\n        this.getCep = function (cep) {\n            return httpService.get('smart', 'cep', cep);\n        };\n    }\n\n}());","(function() {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('coreApiService', CoreApiService);\n\n    CoreApiService.$inject = [ 'boot.options', '$window', '$rootScope', '$http' ];\n\n    function CoreApiService(options, $window, $rootScope, $http) {\n\n        var self = this;\n\n        /*\n        *  url do core obtido do conf.json da aplicacao corrente concatenado com parametros\n        * @param {string} nome da aplicacao. ex: 'accounts', 'drive', 'integra'\n        * @param {string} nome do modulo. ex: 'contactPreferences', 'users/list'.\n        * @returns {string} concatenacao da url do core com parametros.\n        */\n        this.getAppCoreUrl = function (app, module) {\n            var url;\n\n            url = options.core_url + options.def_api_version;\n\n            url += app ? '/' + app : '';\n            url += module ? '/' + module : '';\n\n            return url;\n        };\n\n        // Returns Application name capitalizing the first letter with UpperCase\n        this.getApplicationName = function () {\n            return options.def_api_app.charAt(0).toUpperCase() + options.def_api_app.slice(1);\n        };\n\n        this.redirectToLoginWithCallback = function(callbackUrl) {\n            var callbackQueryString;\n\n            $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', true);\n\n            // Seta callback url\n            callbackQueryString = callbackUrl ? '?callbackurl=' + callbackUrl : '';\n\n            // Busca a URL do login por ambiente (conf.json)\n            $http.get(self.getAppCoreUrl('accounts', 'products/Login/' + options.environment))\n                .success(function(data) {\n                    if (data)\n                        $window.location.href = data.callbackUrl + callbackQueryString;\n                })\n                .error(function() {\n                    console.log('Erro ao obter URL para aplicação de Login'); // eslint-disable-line\n                    $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', false);\n                    return false;\n                });\n        };\n\n        this.redirectToControlPanel = function() {\n            $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', true);\n\n            $http.get(self.getAppCoreUrl('accounts', 'products/Painel/' + options.environment))\n                .success(function(data) {\n                    if (data)\n                        $window.location.href = data.callbackUrl;\n                })\n                .error(function() {\n                    console.log('Erro ao obter URL para Minha Conta'); // eslint-disable-line\n                    $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', false);\n                    return false;\n                });\n        };\n\n        this.getSocialMedia = function() {\n            return {\n                'facebook' : options.facebook,\n                'twitter'  : options.twitter\n            };\n        };\n    }\n\n}());","(function() {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('credentialsService', CredentialsService);\n\n    CredentialsService.$inject = [ 'httpService', '$localstorage', 'coreApiService' ];\n\n    function CredentialsService(httpService, $localstorage, core) {\n\n        this.logout = function () {\n            // Consumir o Core para o token entrar em Blacklist\n            httpService.post('accounts', 'logout')\n                .success(function() {\n                    $localstorage.clearAll();\n                    core.redirectToLoginWithCallback();\n                })\n                .error(function(reason) {\n                    // Chamar Toastr\n                    console.log(reason); // eslint-disable-line no-console\n                });\n        };\n\n        this.getLocal = function () {\n            var userData = $localstorage.get('PLING-USER');\n\n            if (!userData) return null;\n\n            userData = JSON.parse(userData);\n            return userData;\n        };\n\n    }\n\n}());","(function() {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('httpHelperService', HttpHelperService);\n\n    HttpHelperService.$inject = [ '$http', 'coreApiService', '$q' ];\n\n    function HttpHelperService($http, core, $q) {\n\n        var groups = {};\n\n        this.registerUrl = function (url, groupName) {\n            var defer;\n\n            if (!groupName)\n                groupName = 'default';\n\n            if (!groups[groupName]) {\n                defer = $q.defer();\n                groups[groupName] = defer;\n            } else\n                defer = groups[groupName];\n\n            return defer.promise;\n        };\n\n        this.cancelRequest = function (groupName) {\n            if (!groupName)\n                groupName = 'default';\n\n            groups[groupName].resolve('cancelled');\n            delete groups[groupName];\n        };\n    }\n\n}());","(function() {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('httpService', HttpService);\n\n    HttpService.$inject = [ '$http', 'coreApiService', 'httpHelperService' ];\n\n    function HttpService($http, core) {\n\n        this.save = function (app, module, data) {\n            return $http.post(core.getAppCoreUrl(app, module), data);\n        };\n\n        this.update = function (app, module, data) {\n            return $http.put(core.getAppCoreUrl(app, module), data);\n        };\n\n        this.upload = function (app, module, file) {\n            return $http\n               .post(core.getAppCoreUrl(app, module), file, {\n                   'transformRequest' : angular.identity,\n                   'headers'          : { 'Content-Type': undefined }  // eslint-disable-line\n               });\n        };\n\n        this.get = function (app, module, id) {\n            var url = core.getAppCoreUrl(app, module),\n                type;\n\n            if (id) {\n                url += '/' + id;\n            } else if (module.indexOf('public') > 0) {\n                type = {\n                    'responseType': 'arraybuffer'\n                };\n            }\n            return $http.get(url, type);\n        };\n\n        this.getImage = function (url, cb) {\n            this.get('credentials/public?imagepath=' + url)\n                .success(function (imageDownloadData) {\n                    var blob   = new Blob([ imageDownloadData ], { 'type': 'image/jpeg' }),\n                        reader = new FileReader();\n\n                    reader.readAsDataURL(blob);\n                    reader.onloadend = function () {\n                        cb(null, reader.result);\n                    };\n                    // cb(null, objectUrl);\n                })\n                .error(function (err) {\n                    cb(err);\n                });\n        };\n\n        this.post = function (app, module, data) {\n            var req = {\n                'method'  : 'POST',\n                'url'     : core.getAppCoreUrl(app, module),\n                'headers' : {\n                    'Content-Type': 'application/json'\n                },\n                'data': data\n            };\n\n            return $http(req);\n        };\n\n        this.put = function (app, module, data) {\n            var req = {\n                'method'  : 'PUT',\n                'url'     : core.getAppCoreUrl(app, module),\n                'headers' : {\n                    'Content-Type': 'application/json'\n                },\n                'data': data\n            };\n\n            return $http(req);\n        };\n\n        this.delete = function (app, module, id) {\n            var req = {\n                'method'  : 'DELETE',\n                'url'     : core.getAppCoreUrl(app, module) + '/' + id,\n                'headers' : {\n                    'Content-Type': 'application/json'\n                }\n            };\n\n            return $http(req);\n        };\n\n    }\n\n}());\n","(function() {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('tokenService', TokenService);\n\n    TokenService.$inject = [ '$http', '$localstorage', 'coreApiService' ];\n\n    function TokenService($http, $localstorage, coreApiService) {\n\n        this.get = function() {\n            return $localstorage.get('PLING-TOKEN');\n        };\n\n        this.set = function(token) {\n            if (token) {\n                $localstorage.set('PLING-TOKEN', token);\n                return true;\n            }\n\n            return false;\n        };\n\n        this.validate = function (cb) {\n            $http.get(coreApiService.getAppCoreUrl('accounts', 'me'))\n                .success(function(credentialData) {\n                    cb(null, credentialData);\n                })\n                .error(function(reason) {\n                    cb(reason);\n                });\n        };\n\n    }\n\n}());","(function () {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .factory('$exceptionHandler', PlingUiExceptionHandler);\n\n    PlingUiExceptionHandler.$inject = ['$injector'];\n\n    function PlingUiExceptionHandler($injector) {\n\n        return function (exception, cause) {\n\n            // preparing message to be dispatched\n            var dispatcher = null,\n                logger = null,\n                data = {\n                    'error': exception,\n                    'details': cause\n                };\n\n            // logging\n            logger = $injector.get('$log');\n            logger.error(exception);\n\n            if (cause) {\n                logger.debug(cause);\n            }\n\n            // dispatching message\n            dispatcher = $injector.get('$rootScope');\n            dispatcher.$broadcast('PLINGUI_INTERNAL_ERROR', data);\n        };\n    }\n\n}());","(function () {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .factory('shadowLogger', PlingUiLogger);\n\n    function PlingUiLogger() {\n\n        return function ($delegate) {\n\n            return {\n\n                'log': function () {\n                    this.dispatch('log', arguments);\n                },\n\n                'info': function () {\n                    this.dispatch('info', arguments);\n                },\n\n                'error': function () {\n                    this.dispatch('error', arguments);\n                },\n\n                'warn': function () {\n                    this.dispatch('warn', arguments);\n                },\n\n                'dispatch': function (method, params) {\n                    // defining method\n                    var proc = $delegate[method] || $delegate.log,\n                        stamp = new Date().toString(),\n                        prefix = '[' + stamp + '][' + method + ']::',\n                        msg = [],\n                        arg;\n\n                    if (method) {\n                        // preparing msg\n                        msg.push(prefix);\n\n                        // joining params\n                        for (arg in params) {\n                            if (params.hasOwnProperty(arg)) {\n                                msg.push(params[arg]);\n                            }\n                        }\n\n                        // applying log info\n                        proc.apply(null, msg);\n                    }\n                }\n            };\n        };\n    }\n}());","(function () {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .factory('plingRequestInterceptor', PlingRequestInterceptor);\n\n    PlingRequestInterceptor.$inject = [ '$q', '$window' ];\n\n    function PlingRequestInterceptor($q, $window) {\n\n        return {\n\n            // On request\n            'request': function (config) {\n                var isAuth = $window.localStorage.getItem('PLING-TOKEN');\n\n                // Add Token info to every request\n                if (isAuth !== false)\n                    config.headers.Authorization = $window.localStorage.getItem('PLING-TOKEN');\n\n                return config;\n            },\n\n            // On request error\n            'requestError': function (reason) {\n\n                // Return the promise error reason.\n                return $q.reject(reason);\n            },\n\n            // On response success\n            'response': function (response) {\n\n                // Return the response or promise.\n                return response || $q.when(response);\n            },\n\n            // On response error\n            'responseError': function (reason) {\n\n                // Return the promise error reason.\n                return $q.reject(reason);\n            }\n\n        };\n    }\n\n}(document, window.console, window.pling));"]}