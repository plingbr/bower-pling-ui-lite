{"version":3,"sources":["main.js","app-module.js","core/apis/applications-service.js","core/apis/cep-service.js","core/apis/coreapi-service.js","core/apis/credentials-service.js","core/apis/http-helper.js","core/apis/http-service.js","core/apis/token-service.js","core/boot/bootstrapper.js","core/boot/index.js","core/boot/loader.js","core/caching/caching-service.js","core/commons/localstorage-service.js","core/commons/sessionstorage-service.js","core/config/interceptor-factory.js","core/debugging/error-handler.js","core/debugging/logger.js"],"names":["context","pling","window","PlingUiConfig","$provide","$httpProvider","decorator","$delegate","shadowLogger","interceptors","push","PlingUiRun","options","$injector","cache","onRun","cacheViews","get","angular","module","config","run","ApplicationsService","$window","$localstorage","httpService","tokenService","this","getLocal","localAppData","JSON","parse","getCurrentAppModule","currentAppModule","getCurrentApp","currentApp","appModule","env","getCallbackUrl","appId","cb","post","appid","success","data","callbackUrl","error","reason","redirect","url","location","href","service","$inject","CepService","getCep","cep","CoreApiService","$rootScope","$http","self","getAppCoreUrl","app","core_url","def_api_version","getApplicationName","def_api_app","charAt","toUpperCase","slice","redirectToLoginWithCallback","callbackQueryString","$emit","environment","console","log","redirectToControlPanel","CredentialsService","core","logout","clearAll","userData","HttpHelperService","$q","groups","registerUrl","groupName","defer","promise","cancelRequest","resolve","HttpService","save","update","put","upload","file","transformRequest","identity","headers","Content-Type","undefined","id","type","indexOf","responseType","getImage","imageDownloadData","blob","Blob","reader","FileReader","readAsDataURL","onloadend","result","err","req","method","TokenService","coreApiService","set","token","validate","credentialData","logger","Bootstrapper","isBootstrapped","prototype","Angular","root","appname","source","localStorage","setItem","loader","load","local_core_url","localCallbackUrl","queryString","search","coreUrl","defApiVersion","initInjector","injector","currentUrl","warn","debug","auth","Authorization","stringify","profilesProducts","iat","exp","value","bootstrap","clear","split","urlData","modules","settings","menu","submenu","forEach","isSubMenu","isMenu","viewPreferences","boot","dom","onDOMLoaded","directive","filter","querySelector","name","getAttribute","info","addEventListener","document","ConfLoader","filepath","parsed","xhr","XMLHttpRequest","onreadystatechange","readyState","status","responseText","onerror","open","setRequestHeader","send","CachingService","$templateCache","$route","cacheObj","routeObj","partial","route","viewCache","router","routes","hasOwnProperty","templateUrl","$LocalStorage","key","setObject","getObject","$SessionStorage","PlingRequestInterceptor","request","isAuth","getItem","requestError","reject","response","when","responseError","factory","PlingUiExceptionHandler","exception","cause","dispatcher","details","$broadcast","PlingUiLogger","dispatch","arguments","params","arg","proc","stamp","Date","toString","prefix","msg","apply"],"mappings":"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","file":"pling-ui-lite.min.js","sourcesContent":["(function (context) {\n    'use strict';\n\n    context.pling = {};\n\n}(window));\n","(function () {\n    'use strict';\n\n    angular\n        .module('plingUiLite', []);\n\n    angular\n        .module('plingUiLite')\n        .config(['$provide', '$httpProvider', PlingUiConfig]);\n\n    angular\n        .module('plingUiLite')\n        .run([ 'boot.options', '$injector', PlingUiRun ]);\n\n    function PlingUiConfig($provide, $httpProvider) {\n        $provide.decorator('$log', function ($delegate, shadowLogger) {\n            return shadowLogger($delegate);\n        });\n\n        // Interceptor that add token in each Header Request\n        $httpProvider.interceptors.push('plingRequestInterceptor');\n    }\n\n    function PlingUiRun(options, $injector) {\n        var cache = null;\n\n        if (options.onRun && options.onRun.cacheViews) {\n            cache = $injector.get('cacheService');\n            cache.cacheViews();\n        }\n    }\n}());\n","(function() {\n\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('applicationsService', ApplicationsService);\n\n    ApplicationsService.$inject = [ '$window', '$localstorage', 'httpService', 'tokenService' ];\n\n    function ApplicationsService($window, $localstorage, httpService, tokenService) {\n\n        this.getLocal = function() {\n            var localAppData = $localstorage.get('PLING-APPS');\n\n            localAppData = localAppData ? JSON.parse(localAppData) : {};\n            return localAppData;\n        };\n\n        this.getCurrentAppModule = function() {\n            var currentAppModule = $localstorage.get('PLING-CURRENT-APP');\n\n            return currentAppModule;\n        };\n\n        this.getCurrentApp = function() {\n            var currentApp = {\n                'appModule': $localstorage.get('PLING-CURRENT-APP'),\n                'env': $localstorage.get('PLING-CURRENT-ENV')\n            };\n\n            return currentApp;\n        };\n\n        this.getCallbackUrl = function(appId, cb) {\n            httpService.post('accounts', '_oauth', { 'appid': appId })\n                .success(function (data) {\n                    if (data.callbackUrl) {\n                        cb(null, data.callbackUrl + '?token=' + tokenService.get());\n                    } else {\n                        cb('Callback url not found');\n                    }\n                })\n                .error(function (reason) {\n                    cb(reason || 'Server Unavailable', null);\n                });\n        };\n\n        this.redirect = function(url) {\n            $window.location.href = url;\n        };\n\n    }\n\n}());","(function() {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('cepService', CepService);\n\n    CepService.$inject = [ 'httpService' ];\n\n    function CepService(httpService) {\n\n        this.getCep = function (cep) {\n            return httpService.get('smart', 'cep', cep);\n        };\n    }\n\n}());","(function() {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('coreApiService', CoreApiService);\n\n    CoreApiService.$inject = [ 'boot.options', '$window', '$rootScope', '$http' ];\n\n    function CoreApiService(options, $window, $rootScope, $http) {\n\n        var self = this;\n\n        /*\n        *  url do core obtido do conf.json da aplicacao corrente concatenado com parametros\n        * @param {string} nome da aplicacao. ex: 'accounts', 'drive', 'integra'\n        * @param {string} nome do modulo. ex: 'contactPreferences', 'users/list'.\n        * @returns {string} concatenacao da url do core com parametros.\n        */\n        this.getAppCoreUrl = function (app, module) {\n            var url;\n\n            url = options.core_url + options.def_api_version;\n\n            url += app ? '/' + app : '';\n            url += module ? '/' + module : '';\n\n            return url;\n        };\n\n        // Returns Application name capitalizing the first letter with UpperCase\n        this.getApplicationName = function () {\n            return options.def_api_app.charAt(0).toUpperCase() + options.def_api_app.slice(1);\n        };\n\n        this.redirectToLoginWithCallback = function(callbackUrl) {\n            var callbackQueryString;\n\n            $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', true);\n\n            // Seta callback url\n            callbackQueryString = callbackUrl ? '?callbackurl=' + callbackUrl : '';\n\n            // Busca a URL do login por ambiente (conf.json)\n            $http.get(self.getAppCoreUrl('accounts', 'products/Login/' + options.environment))\n                .success(function(data) {\n                    if (data)\n                        $window.location.href = data.callbackUrl + callbackQueryString;\n                })\n                .error(function() {\n                    console.log('Erro ao obter URL para aplicação de Login'); // eslint-disable-line\n                    $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', false);\n                    return false;\n                });\n        };\n\n        this.redirectToControlPanel = function() {\n            $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', true);\n\n            $http.get(self.getAppCoreUrl('accounts', 'products/Painel/' + options.environment))\n                .success(function(data) {\n                    if (data)\n                        $window.location.href = data.callbackUrl;\n                })\n                .error(function() {\n                    console.log('Erro ao obter URL para Minha Conta'); // eslint-disable-line\n                    $rootScope.$emit('PLING-SERVICE-BAR-ISLOADING', false);\n                    return false;\n                });\n        };\n    }\n\n}());","(function() {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('credentialsService', CredentialsService);\n\n    CredentialsService.$inject = [ 'httpService', '$localstorage', 'coreApiService' ];\n\n    function CredentialsService(httpService, $localstorage, core) {\n\n        this.logout = function () {\n            // Consumir o Core para o token entrar em Blacklist\n            httpService.post('accounts', 'logout')\n                .success(function() {\n                    $localstorage.clearAll();\n                    core.redirectToLoginWithCallback();\n                })\n                .error(function(reason) {\n                    // Chamar Toastr\n                    console.log(reason); // eslint-disable-line no-console\n                });\n        };\n\n        this.getLocal = function () {\n            var userData = $localstorage.get('PLING-USER');\n\n            if (!userData) return null;\n\n            userData = JSON.parse(userData);\n            return userData;\n        };\n\n    }\n\n}());","(function() {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('httpHelperService', HttpHelperService);\n\n    HttpHelperService.$inject = [ '$http', 'coreApiService', '$q' ];\n\n    function HttpHelperService($http, core, $q) {\n\n        var groups = {};\n\n        this.registerUrl = function (url, groupName) {\n            var defer;\n\n            if (!groupName)\n                groupName = 'default';\n\n            if (!groups[groupName]) {\n                defer = $q.defer();\n                groups[groupName] = defer;\n            } else\n                defer = groups[groupName];\n\n            return defer.promise;\n        };\n\n        this.cancelRequest = function (groupName) {\n            if (!groupName)\n                groupName = 'default';\n\n            groups[groupName].resolve('cancelled');\n            delete groups[groupName];\n        };\n    }\n\n}());","(function() {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('httpService', HttpService);\n\n    HttpService.$inject = [ '$http', 'coreApiService', 'httpHelperService' ];\n\n    function HttpService($http, core) {\n\n        this.save = function (app, module, data) {\n            return $http.post(core.getAppCoreUrl(app, module), data);\n        };\n\n        this.update = function (app, module, data) {\n            return $http.put(core.getAppCoreUrl(app, module), data);\n        };\n\n        this.upload = function (app, module, file) {\n            return $http\n               .post(core.getAppCoreUrl(app, module), file, {\n                   'transformRequest' : angular.identity,\n                   'headers'          : { 'Content-Type': undefined }  // eslint-disable-line\n               });\n        };\n\n        this.get = function (app, module, id) {\n            var url = core.getAppCoreUrl(app, module),\n                type;\n\n            if (id) {\n                url += '/' + id;\n            } else if (module.indexOf('public') > 0) {\n                type = {\n                    'responseType': 'arraybuffer'\n                };\n            }\n            return $http.get(url, type);\n        };\n\n        this.getImage = function (url, cb) {\n            this.get('credentials/public?imagepath=' + url)\n                .success(function (imageDownloadData) {\n                    var blob   = new Blob([ imageDownloadData ], { 'type': 'image/jpeg' }),\n                        reader = new FileReader();\n\n                    reader.readAsDataURL(blob);\n                    reader.onloadend = function () {\n                        cb(null, reader.result);\n                    };\n                    // cb(null, objectUrl);\n                })\n                .error(function (err) {\n                    cb(err);\n                });\n        };\n\n        this.post = function (app, module, data) {\n            var req = {\n                'method'  : 'POST',\n                'url'     : core.getAppCoreUrl(app, module),\n                'headers' : {\n                    'Content-Type': 'application/json'\n                },\n                'data': data\n            };\n\n            return $http(req);\n        };\n\n        this.put = function (app, module, data) {\n            var req = {\n                'method'  : 'PUT',\n                'url'     : core.getAppCoreUrl(app, module),\n                'headers' : {\n                    'Content-Type': 'application/json'\n                },\n                'data': data\n            };\n\n            return $http(req);\n        };\n\n        this.delete = function (app, module, id) {\n            var req = {\n                'method'  : 'DELETE',\n                'url'     : core.getAppCoreUrl(app, module) + '/' + id,\n                'headers' : {\n                    'Content-Type': 'application/json'\n                }\n            };\n\n            return $http(req);\n        };\n\n    }\n\n}());\n","(function() {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('tokenService', TokenService);\n\n    TokenService.$inject = [ '$http', '$localstorage', 'coreApiService' ];\n\n    function TokenService($http, $localstorage, coreApiService) {\n\n        this.get = function() {\n            return $localstorage.get('PLING-TOKEN');\n        };\n\n        this.set = function(token) {\n            if (token) {\n                $localstorage.set('PLING-TOKEN', token);\n                return true;\n            }\n\n            return false;\n        };\n\n        this.validate = function (cb) {\n            $http.get(coreApiService.getAppCoreUrl('accounts', 'me'))\n                .success(function(credentialData) {\n                    cb(null, credentialData);\n                })\n                .error(function(reason) {\n                    cb(reason);\n                });\n        };\n\n    }\n\n}());","(function (context, logger) {\n    'use strict';\n\n    // creating namespace\n    function Bootstrapper() {\n        this.isBootstrapped = false;\n    }\n\n    // boot a module\n    Bootstrapper.prototype.Angular = function (root, appname, source, cb) {\n        var self = this;\n\n        window.localStorage.setItem('PLING-CURRENT-APP', appname);\n\n        // loading file\n        context.loader.load(source, function (err, options) {\n\n            options.core_url = options.environment === 'local' ? options.local_core_url || options.core_url : options.core_url;\n\n            var // eslint-disable-line\n                token         = window.localStorage['PLING-TOKEN'],\n                queryString   = window.localStorage['PLING-QUERY-STRING'] || window.location.search,\n                coreUrl       = options.core_url,\n                environment   = options.environment,\n                defApiVersion = options.def_api_version,\n                initInjector  = angular.injector(['ng']),\n                $http         = initInjector.get('$http'),\n                currentUrl    = window.location.href,\n                localCallbackUrl;\n\n            window.localStorage.setItem('PLING-CURRENT-ENV', environment);\n\n            // checking errors...\n            if (err) {\n                logger.warn('Arquivo de configuracao nao encontrado!');\n                logger.debug(err);\n\n                return false;\n            }\n\n            // No authentication\n            if ('auth' in options && options.auth === false) {\n                if (!token) {\n                    // saving boot settings\n                    angular.module(appname).value('boot.options', options); // eslint-disable-line\n\n                    // starting app\n                    angular.bootstrap(root, [appname]);\n                    self.isBootstrapped = true;\n\n                    // calling callback\n                    if (cb) cb();\n                }\n                else {\n                    $http\n                    .get(coreUrl + defApiVersion + '/accounts/me' + '?appmodule=' + appname + '&environment=' + environment, {\n                        'headers': { 'Authorization': token }\n                    })\n                    .success(function(credentialData) {\n                        window.localStorage.setItem('PLING-APPS', JSON.stringify(credentialData.profilesProducts));\n\n                        delete credentialData.profilesProducts;\n                        delete credentialData.iat;\n                        delete credentialData.exp;\n\n                        window.localStorage.setItem('PLING-USER', JSON.stringify(credentialData));\n\n                        // saving boot settings\n                        angular.module(appname).value('boot.options', options); // eslint-disable-line\n\n                        // starting app\n                        angular.bootstrap(root, [appname]);\n                        self.isBootstrapped = true;\n\n                        // calling callback\n                        if (cb) cb();\n                    })\n                    .error(function(reason) {\n                        logger.error(reason);\n                        window.localStorage.clear();\n                        window.localStorage.setItem('PLING-CURRENT-APP', appname);\n                        window.localStorage.setItem('PLING-CURRENT-ENV', environment);\n                        // saving boot settings\n                        angular.module(appname).value('boot.options', options); // eslint-disable-line\n                        // starting app\n                        angular.bootstrap(root, [appname]);\n                        self.isBootstrapped = true;\n                    });\n                }\n\n                return false;\n            }\n\n            // checking for the token\n            if (!token && queryString.indexOf('token=') === 1) {\n                window.localStorage.setItem('PLING-TOKEN', queryString.split('=')[1]);\n            }\n\n            // if there's no token it must redirect to login\n            if (!token && coreUrl) {\n                window.localStorage.clear();\n                localCallbackUrl = currentUrl ? '?callbackurl=' + currentUrl : '';\n                $http\n                    .get(coreUrl + defApiVersion + '/accounts/products/Login/' + environment)\n                    .success(function(urlData) {\n                        window.location.href = urlData.callbackUrl + localCallbackUrl;\n                        return false;\n                    })\n                    .error(function(reason) {\n                        logger.error(reason);\n                        return false;\n                    });\n            }\n\n            // else it must validate it and then start the application\n            else {\n                $http\n                    .get(coreUrl + defApiVersion + '/accounts/me' + '?appmodule=' + appname + '&environment=' + environment, {\n                        'headers': { 'Authorization': token }\n                    })\n                    .success(function(credentialData) {\n\n                        window.localStorage.setItem('PLING-APPS', JSON.stringify(credentialData.profilesProducts));\n\n                        if (credentialData.modules) {\n                            window.localStorage.setItem('PLING-MODULES', JSON.stringify(credentialData.modules));\n\n                            pling.loader.settings.menu    = []; // eslint-disable-line\n                            pling.loader.settings.submenu = []; // eslint-disable-line\n\n                            credentialData.modules.forEach(function(module) {\n                                if (module.config.isSubMenu) {\n                                    pling.loader.settings.submenu.push(module); // eslint-disable-line\n                                } else if (module.config.isMenu && !module.config.isSubMenu) {\n                                    pling.loader.settings.menu.push(module);    // eslint-disable-line\n                                }\n                            });\n                        }\n\n                        if (credentialData.viewPreferences)\n                            window.localStorage.setItem('PLING-CURRENT-VIEW-PREFERENCES', JSON.stringify(credentialData.viewPreferences));\n\n                        delete credentialData.profilesProducts;\n                        delete credentialData.iat;\n                        delete credentialData.exp;\n\n                        window.localStorage.setItem('PLING-USER', JSON.stringify(credentialData));\n\n                        // saving boot settings\n                        angular.module(appname).value('boot.options', options); // eslint-disable-line\n\n                        // starting app\n                        angular.bootstrap(root, [appname]);\n                        self.isBootstrapped = true;\n\n                        // calling callback\n                        if (cb) cb();\n                    })\n                    .error(function(reason) {\n                        logger.error(reason);\n                        window.localStorage.clear();\n                        localCallbackUrl = currentUrl ? '?callbackurl=' + currentUrl : '';\n                        $http\n                            .get(coreUrl + defApiVersion + '/accounts/Login/' + environment)\n                            .success(function(urlData) {\n                                window.location.href = urlData.callbackUrl + localCallbackUrl;\n                                return false;\n                            })\n                            .error(function(reason) {\n                                logger.error(reason);\n                                return false;\n                            });\n                    });\n            }\n        });\n    };\n\n    // creating instance\n    context.boot = new Bootstrapper();\n\n}(window.pling, window.console));","(function (dom, logger, context) {\n    'use strict';\n\n    // Content Loaded listener\n    function onDOMLoaded() {\n\n        // detect angular application 'directive'\n        var root,\n            directive = 'plg-app',\n            source    = 'src',\n            filter    = '[' + directive + ']';\n\n        // retrieving root element\n        root = dom.querySelector(filter);\n\n        // working on root\n        if (root) {\n\n            // retrieving app name\n            context.name   = root.getAttribute(directive);\n            context.source = root.getAttribute(source) || 'pling.conf.json';\n\n            // loading config file\n            logger.info('AngularJS 1.5.x spa check:', true);\n            context.boot.Angular(root, context.name, context.source, function (err) {\n\n                if (err) logger.error('Could not boot app ', context.name);\n                else logger.info('Bootstrapped:', context.boot.isBootstrapped);\n\n            });\n\n        } else {\n            logger.info('AngularJS 1.5.x spa check:', false);\n        }\n    }\n\n    dom.addEventListener('DOMContentLoaded', onDOMLoaded);\n\n}(document, window.console, window.pling));","(function (context) {\n    'use strict';\n\n    // creating namespace\n    function ConfLoader() {\n        this.settings = null;\n    }\n\n    // loading file\n    ConfLoader.prototype.load = function (filepath, cb) {\n        var self = this,\n            parsed,\n            xhr = new XMLHttpRequest(); // eslint-disable-line\n\n        // sending result\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n\n                    parsed = JSON.parse(xhr.responseText);\n                    self.settings = parsed;\n\n                    cb(null, parsed);\n                } else {\n                    cb('Error loading file - status ' + xhr.status, {});\n                }\n            }\n        };\n\n        // handling error\n        xhr.onerror = function (err) {\n            cb(err);\n        };\n\n        // fetching file\n        xhr.open('GET', filepath, true);\n        xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n        xhr.send();\n    };\n\n    // creating instance\n    context.loader = new ConfLoader();\n}(window.pling));","(function() {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('cacheService', CachingService);\n\n    CachingService.$inject = [ '$templateCache', '$route', '$http' ];\n\n    function CachingService($templateCache, $route, $http) {\n\n\n        this.cacheViews = function (cacheObj, routeObj) {\n\n            // setting defaults\n            var\n                partial, route,\n                viewCache = cacheObj || $templateCache,\n                router = routeObj || $route;\n\n            // looping routes\n            for (route in router.routes) {\n\n                if (router.routes.hasOwnProperty(route)) {\n\n                    // evaluate partial\n                    partial = router.routes[route].templateUrl;\n\n                    if (partial)\n                        // caching route\n                        $http.get(partial, {'cache': viewCache});\n                }\n            }\n        };\n    }\n\n}());\n","(function() {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('$localstorage', $LocalStorage);\n\n    $LocalStorage.$inject = [ '$window' ];\n\n    function $LocalStorage($window) {\n        return {\n\n            'clearAll': function () {\n                $window.localStorage.clear();\n            },\n\n            'set': function (key, value) {\n                $window.localStorage[key] = value;\n            },\n\n            'get': function (key) {\n                return $window.localStorage[key];\n            },\n\n            'setObject': function (key, value) {\n                $window.localStorage[key] = JSON.stringify(value);\n            },\n\n            'getObject': function (key) {\n                return JSON.parse($window.localStorage[key] || '{}');\n            }\n        };\n    }\n\n}());","(function () {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .service('sessionstorage', $SessionStorage);\n\n    $SessionStorage.$inject = [ '$window' ];\n\n    function $SessionStorage($window) {\n        return {\n\n            'clearAll': function () {\n                $window.localStorage.clear();\n            },\n\n            'set': function (key, value) {\n                $window.localStorage[key] = value;\n            },\n\n            'get': function (key) {\n                return $window.localStorage[key];\n            },\n\n            'setObject': function (key, value) {\n                $window.localStorage[key] = JSON.stringify(value);\n            },\n\n            'getObject': function (key) {\n                return JSON.parse($window.localStorage[key] || '{}');\n            }\n        };\n    }\n\n}());","(function () {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .factory('plingRequestInterceptor', PlingRequestInterceptor);\n\n    PlingRequestInterceptor.$inject = [ '$q', '$window' ];\n\n    function PlingRequestInterceptor($q, $window) {\n\n        return {\n\n            // On request\n            'request': function (config) {\n                var isAuth = $window.localStorage.getItem('PLING-TOKEN');\n\n                // Add Token info to every request\n                if (isAuth !== false)\n                    config.headers.Authorization = $window.localStorage.getItem('PLING-TOKEN');\n\n                return config;\n            },\n\n            // On request error\n            'requestError': function (reason) {\n\n                // Return the promise error reason.\n                return $q.reject(reason);\n            },\n\n            // On response success\n            'response': function (response) {\n\n                // Return the response or promise.\n                return response || $q.when(response);\n            },\n\n            // On response error\n            'responseError': function (reason) {\n\n                // Return the promise error reason.\n                return $q.reject(reason);\n            }\n\n        };\n    }\n\n}(document, window.console, window.pling));","(function () {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .factory('$exceptionHandler', PlingUiExceptionHandler);\n\n    PlingUiExceptionHandler.$inject = ['$injector'];\n\n    function PlingUiExceptionHandler($injector) {\n\n        return function (exception, cause) {\n\n            // preparing message to be dispatched\n            var dispatcher = null,\n                logger = null,\n                data = {\n                    'error': exception,\n                    'details': cause\n                };\n\n            // logging\n            logger = $injector.get('$log');\n            logger.error(exception);\n\n            if (cause) {\n                logger.debug(cause);\n            }\n\n            // dispatching message\n            dispatcher = $injector.get('$rootScope');\n            dispatcher.$broadcast('PLINGUI_INTERNAL_ERROR', data);\n        };\n    }\n\n}());","(function () {\n    'use strict';\n\n    angular\n        .module('plingUiLite')\n        .factory('shadowLogger', PlingUiLogger);\n\n    function PlingUiLogger() {\n\n        return function ($delegate) {\n\n            return {\n\n                'log': function () {\n                    this.dispatch('log', arguments);\n                },\n\n                'info': function () {\n                    this.dispatch('info', arguments);\n                },\n\n                'error': function () {\n                    this.dispatch('error', arguments);\n                },\n\n                'warn': function () {\n                    this.dispatch('warn', arguments);\n                },\n\n                'dispatch': function (method, params) {\n                    // defining method\n                    var proc = $delegate[method] || $delegate.log,\n                        stamp = new Date().toString(),\n                        prefix = '[' + stamp + '][' + method + ']::',\n                        msg = [],\n                        arg;\n\n                    if (method) {\n                        // preparing msg\n                        msg.push(prefix);\n\n                        // joining params\n                        for (arg in params) {\n                            if (params.hasOwnProperty(arg)) {\n                                msg.push(params[arg]);\n                            }\n                        }\n\n                        // applying log info\n                        proc.apply(null, msg);\n                    }\n                }\n            };\n        };\n    }\n}());"],"sourceRoot":"/source/"}